extends ../../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../../SharedAssets/Markup/SharedAssets.russian.pug
  include ../../../../SharedComponents/SharedComponents.russian.pug


block append Metadata

  -

    RegularWebPageTemplate__YDF.configure({
      metadata: {
        title: buildHTML_PageTitle("Валидация выходного HTML-кода"),
        description:
            "Node.js-утилита для сборки проектов «Yamato Daiwa Automation» (сокращённо: «YDA», читается: «Уай-Ди-Эй») " +
              "при работе с разметкой осуществляет валидацию HTML-кода c выводом результатов в консоль в реальном времени. " +
            "В сравнении с уже существовавшими на момент релиза первых версий YDA Node.js-утилитами и их Gulp-адаптациями, " +
              "валидация HTML-кода в YDA имеет улучшенное логирование о нарушениях валидности и хорошую оптимизацию " +
              "производительности.",
      },
      stylesSheetsURIs: [
        "$CommonStyles",
        "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
        "$PreMadesStyles",
        "@CustomizedExternalComponents"
      ]
    });

    RoutingEmulator.setCurrentRoute("functionality.children.markupProcessing.children.basicPugToHTML_Transpiling");

    LanguageDropDownList__YDF_DK.setLinks({
      english: "./HTML_Validation.english.html",
      japanese: "./HTML_Validation.japanese.html",
    });


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    h1.Article-Heading1 Валидация выходного HTML-кода

    //- TODO ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    //- Картиночку плиз

    p.Article-Paragraph.
      Высококачественная веб-разработка подразумевает валидность HTML-кода, то есть его соответствие стандартам,
        установленным W3C.
      Даже для опытных веб-разработчиков требование знания спецификаций W3C является невозможным, поэтому веб-разработку
        необходимо организовать так, чтобы разработчик узнавал о нарушениях по мере их допускания (поскольку это не
        нарушения закона, то такой подход приемлем).
      К счастью, если просто писать HTML-код, используя тэги и аттрибуты с соответствии с их назначением, то большого
        количества нарушений не будет.
      Главное — не допустить накопления большого количества нарушений, для чего их необходимо исправлять сразу же, как
        только они возникли.
      Для этого нужно организовать валидацию HTML-кода в реальном времени, то есть при сохранении файла.


    h2.Article-Heading2 Что было до YDA

    p.Article-Paragraph.
      Node.js-yтилиты для валидации HTML-кода, конечно же, существовали до YDA, например ... и их адаптации для Gulp.
      Многие они работают по одинаковому принципу: читают HTML-файл, отправляют содержимое в сервис валидации
        а затем выводят результаты в консоль или в файлы.
      Есть и оффлайн валидатор, однако его работа неэквивалента онлайн.

    p.Article-Paragraph.
      Первая проблема состоит в том, чтобы обеспечить валидацию "на лету", когда HTML-код будет откомпилирован Pug-код,
        а не читать выходные HTML-файлы, причём отчёт выводить в консоль, а не в файлы.
      Это не очень сложно, но при малом опыте работы с Gulp может вызывать проблемы и в любом случае заёмет время.

    p.Article-Paragraph.
      Но наибольшая проблема — оптимизация.
      Наличие нескольких десятков HTML-файлов в проекте - норма для средних и больших сайтов.
      Если всё делать без оптимизации, то при каждой сборке проектов данные всех этих нескольких десятков файлов будут
        отправлены на сервис.
      Поскольку у нас есть и другие таски, то они будут тормозить процесс обмена информацией с сервисом, и в итоге
        это может время проверки одного файла может занять 10 секунд и больше...

    p.Article-Paragraph.
      Ещё больше проблем в режиме и инкрементальной сборки.
      Во-первых, нужно организовать так, чтобы при сохранении одного исходного Pug-файла пересобирался только нужная
        страница... (это в свою очередь тригерит HTML-валидацию)
      Во-вторых, если запросы будут отсылаться слишком часто, мы получим ошибку too much requests.


    h2.Article-Heading Как работает валидация HTML-кода в YDA

    p.Article-Paragraph.
      Валидация HTML интегрирована в общий процесс обработки файлов разметки, начинающийся с компиляции из Pug-в-HTML.
      Соответственно, валидации подлежит именно выходной HTML-код.

    p.Article-Paragraph.
      Так как YDA предназначена для высококаественной веб-разработки, то она активная по умолчанию.


    h3.Article-Heading3 В режимах с инкременательной сборкой

    p.Article-Paragraph.
      Если файл новый, то не дожидаясь записи на диск HTML-файлов, откомпилированный из Pug в HTML код отправляется на
        сервис валидации ...
      По умолчанию, сообщение о начале валидации и об её окончании не выводится в консоль, чтобы не перегружать
        разработчика информацией, но при желании вывод можно включить (см.).
      Если же имеются нарушения, то вывод в консоль осуществляется незамедлительно для каждого файла независимо.
      Форматирование реализовано в YDA, включает в себя улучшенную подсветку проблемного участка кода.

    p.Article-Paragraph.
      Результаты валидации записываются в кэш, в файл YDA/Markup/...
      Далее этот файл будет переиспользован при следующем запуске YDA.


    h3.Article-Heading3 На продакшен-подобных режимах

    p.Article-Paragraph.
      Будучи предназначенным для высококачественной разработки, YDA не пропускает невалидный HTML-код на ... режимах сборки.
      Основное отличие от режима инкрементальной сборки состоит в том, что при наличии ошибок будет выброшено искючение и сборка прекратится.
      Чтобы не допустить этого, все ошибки валидности следует устранить на режиме локальной сборки.

    p.Article-Paragraph.
      Зная основы психологии, мы никому не верим, что "да мы потом всё исправим".
      Вы, конечно можете отключить валидацию HTML-кода, но это серьёзнейшая трещина в фундаменте.


    h2.Article-Heading Отключение валидации выходного HTML-кода

    p.Article-Paragraph.
      Как уже говорилось выше, отключение валидации выходного HTML категорически не рекомендуется, а основным
        решением проблемы наличия нарушение валидности HTML является исправление этих нарушений.
      Если Вы отключаете валидацию HTML-кода, но при этом потенциально можете исправить ошибки, тем самым Вы отказываетесь
        соблюдать фундаментальные правила, установленные ..., которые не являются стилистическими разногласиями.

    p.Article-Paragraph.
      Тем не менее, в следующих ситуациях отключение валидации HTML может быть оправдано.

    ul.Article-UnorderedList

      li.
        Написание кода для каких-либо особых технологий, использующих HTML-код для написания разметки, но при этом
          допускающих расширенных синтаксис, например Electron.js.

      li.
        Принуждение к использованию стороннего Pug-кода в проекте, который нельзя править с силу каких-либо причин.
