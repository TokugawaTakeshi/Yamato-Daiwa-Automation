extends ../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../SharedAssets/Markup/SharedAssets.english.pug
  include ../../SharedComponents/SharedComponents.english.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "en";
    HTML_PAGE_TITLE = buildHTML_PageTitle("Terminology");
    HTML_PageMetaData = {
      description:
          "The terminology which being used by the \"Yamato Daiwa Automation\" (abbreviation: \"YDA\")," +
            "the Node.js utility for the projects (client web applications, server applications, console utilities, " +
            "libraries) building tool. " +
          "The part of terms is being used be other technologies, another part has been defined by the YDA developers",
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [
      "$CommonStyles",
      "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
      "$PreMadesStyles",
      "@CustomizedExternalComponents"
    ];

    scriptsURIs.endOfBody = [ "$CommonLogic" ];

    RoutingEmulator.setCurrentRoute("functionality.children.markupProcessing.children.basicPugToHTML_Transpiling");

    LanguageDropDownList__YDF_DK.setLinks({
      japanese: "./Terminology.japanese.html",
      russian: "./Terminology.russian.html"
    });

    const pageTableOfContents = localizedRouting.terminology.$sectioning;


block append HeadScriptsLinks

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    //- ━━━ Terminology ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({ level: 1, text: localizedRouting.terminology.$heading }).Article-Heading1

    //- ━━━ YDA ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.YDA.$heading,
      HTML_ID: pageTableOfContents.YDA.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+DefinableTerm--YDID YDA] is the abbreviation of #[+ImportantEntity--YDID Yamato Daiwa Automation], the name of
        this tool about documentation which.
      Here, the #[+ImportantEntity--YDID Yamato Daiwa] is the name of of
        #[+Link--YDF({ endorsedExternalURI: sharedExternalLinks.YamatoDaiwa.homePage.top }).Article-Link Japanese startup],
        currently specializing on custom web development, and also on development of the librarires, frameworks and
        other tools (including #[+ImportantEntity--YDID YDA]).


    //- ━━━ Project ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.project.$heading,
      HTML_ID: pageTableOfContents.project.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+Keyphrase--YDID In the programming context], the #[+DefinableTerm--YDID project] — is the files and folders set
        which has the common parent directory and on which base the software product (web application, console
        application, library etc.) will be built.
      Why this term important is the #[+ImportantEntity--YDID YDA] intended exactly for the working with
        #[+Term--YDID projects], #[+Keyword--YDID not]&nbsp;with individual files.


    //- ─── Project build(ing) ─────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.project.$children.building.$heading,
      HTML_ID: pageTableOfContents.project.$children.building.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      In the #[+Term--YDID "project building"], the #[+Term__Contrast--YDID gerund] #[+Term--YDID "building"] refers
        #[+Keyword--YDID mainly] on the #[+Keyword--YDID process], namely the forming of the #[+Term--YDID output files]
        based on the #[+Term--YDID source code] and other #[+Term--YDID source files].
      This process is the main thing which #[+ImportantEntity--YDID YDA] doing.

    p.Article-Paragraph.
      The #[+Term--YDID "build"] could be the #[+Term--YDID noun] #[+Keyword--YDID or] #[+Term--YDID verb].

    ul.Article-UnorderedList

      li.
        As #[+Term--YDID noun], the #[+Term--YDID "build"] in the #[+DefinableTerm--YDID project build] means
          #[+Keyword--YDID all] #[+Term--YDID output files] of the #[+Term--YDID project] which
          #[+Keyword--YDID usually] has the #[+Keyword__Contrast--YDID common] #[+Term--YDID directory] called
          #[+Term--YDID "build directory"].
        #[+ImportantEntity--YDID YDA] does&nbsp;#[+Keyword--YDID not] require the single #[+Term--YDID build directory],
          because is some cases it could be the obstacle for the solving of target problems.

      li.
        As #[+Term--YDID verb], the #[+Term--YDID "build"] in the #[+DefinableTerm--YDID build project] means the
          various processes forming the #[+Term--YDID output files] such as source code compiling, images optimization
          etc.

    p.Article-Paragraph.
      #[+Keyword--YDID Not] all technologies requires the #[+Term--YDID project building].
      For example, if the #[+Term--YDID web site] or #[+Term--YDID web application] has been written by pure
        #[+SecondaryEntity--YDID HTML], #[+SecondaryEntity--YDID CSS] and #[+SecondaryEntity--YDID PHP] (the
        last one is #[+Term--YDID interpreted programming language] what means that source code files are being executed
        directly without compilation to the #[+Term--YDID output executable files]), in this case it is
        #[+Keyword--YDID nothing] to build.
      About #[+ImportantEntity--YDID YDA], it has being developed for the working with #[+ImportantEntity--YDID Pug],
        #[+ImportantEntity--YDID Stylus] и #[+ImportantEntity--YDID TypeScript] languages each of them
        #[+Keyword--YDID intended] to be transpiled to the #[+Term--YDID output code] (#[+ImportantEntity--YDID HTML],
        #[+ImportantEntity--YDID CSS] and #[+ImportantEntity--YDID JavaScript] respectively).
      Besides, output images files could differ with source ones because of #[+Keyword--YDID automated]
        #[+Term--YDID optimization].
      In the case, when the files are not required any processing, the plain copying could be setup to not mix
        the source files and output ones.


    //- ━━━ Task ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.scenario.$heading,
      HTML_ID: pageTableOfContents.scenario.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+Keyphrase--YDID In the #[+Term--YDID project building] context], the #[+DefinableTerm--YDID task] is the
        specialized work for the computer among #[+Term--YDID project building] automation.
      Currently the following primary #[+Term--YDID tasks] on which #[+ImportantEntity--YDID YDA] is specializing
        could be highlighted.

    ul.Article-UnorderedList

      li.
        The processing of the #[+Term--YDID markup] with source code on #[+ImportantEntity--YDID Pug], the
          #[+Term--YDID preprocessor language].

      li.
        The processing of the #[+Term--YDID styles] with source code on #[+ImportantEntity--YDID Stylus], the
          #[+Term--YDID preprocessor language].

      li.
        The processing of #[+Term--YDID ECMAScript logic] with source code on #[+ImportantEntity--YDID TypeScript]
          (although it rarely called by "preprocessor language", it will be so until it's runtimes will become popular).
        The transpiling to #[+Keyword--YDID both] browser #[+ImportantEntity--YDID JavaScript] and
          #[+ImportantEntity--YDID Node.js] is available.

      li Images processing

      li The copying of fronts, videos, audios and ony other files


    //- ━━━ Scenario ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.task.$heading,
      HTML_ID: pageTableOfContents.task.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      #[+Keyphrase--YDID In the context of #[+ImportantEntity--YDID YDA]], and also #[+ImportantEntity--YDID Gulp],
        and similar #[+Term--YDID project bulling] tools, the #[+DefinableTerm--YDID scenario] are the
        #[+Term--YDID tasks] been arranged into #[+Term--YDID sequences] (#[+Term--YDID series]) and
        #[+Term--YDID parallels].

    p.Article-Paragraph.
      The correct #[+Term--YDID tasks] arranging is #[+Keyword--YDID critical] for #[+Keyword--YDID both] correct
        executing and performance optimization.
      For example, the #[+Term--YDID markup] processing is been executed only when files #[+Keyword--YDID all]
        #[+Keyword__Contrast--YDID other] files types are ready to correctly resolve the paths to styles,
        images etc., and browser is opening #[+Keyword--YDID automatically] #[+Keyword__Contrast--YDID last] of all,
        when the #[+Term--YDID markup] is ready.

    p.Article-Paragraph.
      Because the #[+ImportantEntity--YDID YDA] is more high-level tool than #[+ImportantEntity--YDID Gulp], the users
        does #[+Keyword--YDID not]&nbsp;need to care about correct arranging of the #[+Term--YDID tasks] to
        #[+Term__Contrast--YDID series] and #[+Term__Contrast--YDID parallels].
      It is enough to know which #[+Term--YDID scenarios] are available.

    p.Article-Paragraph.
      Currently, #[+ImportantEntity--YDID YDA] supports #[+ImportantEntity--YDID 2] #[+Term--YDID scenarios]:

    dl.Article-DescriptionList

      dt Project incremental building
      dd.
        #[+Keyword--YDID First], the #[+Keyword__Contrast--YDID full] #[+Term--YDID project building] is being executed,
          #[+Keyword--YDID then] on changing of the source files, the #[+Keyword--YDID selective] rebuilding will be.
        So, the application will be executed until will not&nbsp;be manually stopped or the critical error occurs.
        If required, the automatic browser opening (if the #[+Term--YDID project] has the client part) and/or automatic
          starting of the local server (if the #[+Term--YDID project] has the #[+ImportantEntity--YDID Node.js] server
          part) could be setup.

      dt Production-like project building
      dd.
        The #[+Term--YDID project] is being built, then the application will #[+Keyword--YDID stop].
        The functionality like automatic reloading of the browser page is unavailable because of the scenario purpose.


    //- ━━━ Project Building Mode ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.projectBuildingMode.$heading,
      HTML_ID: pageTableOfContents.projectBuildingMode.$anchor
    }).Article-Heading2

    p.Article-Paragraph.

      #[+Keyword--YDID Both] #[+Term--YDID scenarios] could be executed in the #[+Keyword--YDID multiple]
        (#[+Term--YDID project building]) #[+Term--YDID modes], #[+Keyword--YDID each] of them has specific feature.
      #[+ImportantEntity--YDID YDA] is suggesting #[+ImportantEntity--YDID 5] following
        #[+Term--YDID project building modes].
      They also could be considered as the #[+Keyword--YDID stages], but #[+Keyword--YDID not]&nbsp;the
        #[+Term--YDID stages] of development of the software as a whole — the are the #[+Term--YDID stages] of the
        development of a #[+Keyphrase--YDID separate page or a specific functionality].

    dl.Article-DescriptionList

      dt Incremental
      dd

        p.Article-Paragraph.
          This adverb means that on such #[+Term--YDID modes] #[+Keyword--YDID first]
            #[+Keyword--YDID full] #[+Term--YDID project building] is being executed, а the with the changes of the source
            code, #[+Keyword--YDID automatic] #[+Keyword__Contrast--YDID selective] #[+Term--YDID rebuilding] starts.

        dl.Article-DescriptionList

          dt Static Preview
          dd.
            Designed and the development stage on which the engineer focuses on the #[+Term--YDID markup]
              #[+Keyword--YDID and] #[+Term--YDID styles], while the #[+Term--YDID JavaScript dynamics] and
              #[+Term--YDID server part] (#[+Term--YDID backend]) is the matter of #[+Keyword--YDID next] stages.
            All problems related with the design (appearance) and adaptation to screens of various sized should be
              solved on this stage.
            In this mode, #[+ImportantEntity--YDID YDA] case build the project such as the customers or managers
              could check the interim result #[+Keyphrase--YDID without local server] and any other specialized
              software.

          dt Local Development
          dd.
            On this stage, unlike previous one, the #[+Keyword--YDID full-fledged] implementation of
              #[+Term--YDID JavaScript dynamics] and #[+Term--YDID server part] (#[+Term--YDID backend]) is being
              executed.
            On this stage, the #[+Term--YDID project building tool] must provide the #[+Keyword--YDID optimized]
              #[+Term--YDID project rebuilding], #[+Keyword--YDID automated] reloading of the browser  page,
              #[+Keyword--YDID automated] restarting of the local server with the changing of the files and other
              measured gives the comfortable software development with high-quality feedback including early
              notification about various problems such as the #[+Term--YDID HTML validity violation].

      dt Production-like
      dd

        p.Article-Paragraph.
          It is usual before the publishing of the web site or the web application they being launched on the test
            server with the limited access to make testers able to check the bugs which has not been detected on previous
            development stages.
          On the stages of this group, there is no the automated #[+Term--YDID project rebuilding] or automated
            browser reloading on updating of files anymore because built web site or web application intended to be
            launched on the server, #[+Keyword--YDID not]&nbsp;on the local machine.
          Although such builds must be close to the final one (the #[+Keyword--YDID production] one, that is why the
            modes of this group is being called "production-like"), some behaviour (for example, the logging level)
            could be different dependent on the specific #[+Term--YDID mode].

        dl.Article-DescriptionList

          dt Testing
          dd.
            Unlike the #[+Term--YDID local development mode], the testers, managers and other people related with
              target web site or web application has access to the instance built in this mode.
            As it obvious from the name, the target of the current stage is the testing for the detecting of the bugs.

          dt Staging
          dd.
            In large projects, besides the #[+Term--YDID testing] build, there is the similar one called "staging".
            The difference are usually small: it tends to be the usage of the data close with the real one, not the
              data designed for testing purposes.
            Thanks to it, the management and customers feels like using the final published instance of the
              web site or web application.

          dt Production
          dd.
            The web site of web application built in this mode intended to be published for the target audience.
            By comparison with other #[+Term--YDID production-like modes], here the maximal security settings are
              required.
            Also, on this stage, the developers are tending to minimize the output to the browser console.


    //- ━━━ Entry Points and Fragments ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    +Heading--YDF({
      level: 2,
      text: pageTableOfContents.entryPointsAndChildrenFiles.$heading,
      HTML_ID: pageTableOfContents.entryPointsAndChildrenFiles.$anchor
    }).Article-Heading2

    p.Article-Paragraph.
      The #[+DefinableTerm--YDID entry point] is the name of #[+Term--YDID design pattern],
        #[+Keyphrase--YDID in the general case] it is the #[+Term--YDID file], #[+Term--YDID function] or
        #[+Term--YDID class method] from which the program execution started.
      In the context of the certain technology, it could have more specific meaning.
    //- TODO ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


    //- ─── Markup ─────────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.entryPointsAndChildrenFiles.$children.markup.$heading,
      HTML_ID: pageTableOfContents.entryPointsAndChildrenFiles.$children.markup.$anchor
    }).Article-Heading3

    p.Article-Paragraph.
      #[+Keyphrase--YDID In #[+Keyword--YDID markup] case], the #[+Term--YDID entry point] is the file representing the
        #[+Keyword--YDID complete] #[+Term--YDID HTML document].
      #[+Keyword--YDID Basically], #[+Term--YDID HTML file] could&nbsp;#[+Keyword--YDID not] be split to multiple files,
        but the #[+Term--YDID HTML pre-processors] like #[+ImportantEntity--YDID Pug] allows to do it on the source code
        stage for example, for the reusing of the specific #[+Term--YDID code] in multiple files.
      Here #[+Term--YDID parent files] (which are the #[+Term--YDID entry points] compiled to #[+Keyword--YDID complete]
        #[+Term--YDID HTML files]) and #[+Term--YDID partials] (#[+Keyword--YDID children]
        #[+Keyphrase--YDID context dependent] files which are #[+Keyword--YDID not]&nbsp;representing the valid
        #[+Term--YDID HTML document] and could be used #[+Keyphrase--YDID only as the part] of
        #[+Term--YDID entry points] must be distinguished.
      Originally the «partial» does&nbsp;#[+Keyphrase--YDID not]&nbsp;assume the vertical hierarchy, while in the
        context of the programming and declarative languages (especially pre-processors), often is does.
      Finding more exact term, we have selected the «fragment» word and "fragment file" compound noun, because according
        the definition, #[+Keyphrase--YDID in a broad sense] "fragment" the part of something whole.

    //- ─── Styles ─────────────────────────────────────────────────────────────────────────────────────────────────────
    +Heading--YDF({
      level: 3,
      text: pageTableOfContents.entryPointsAndChildrenFiles.$children.styles.$heading,
      HTML_ID: pageTableOfContents.entryPointsAndChildrenFiles.$children.styles.$anchor
    }).Article-Heading3

    p.Article-Paragraph
      | #[+Keyphrase--YDID In #[+Term--YDID styles] case], the #[+Term--YDID "entry point"] term is
      |   #[+Keyword--YDID unclear]
      |
      +Keyphrase--YDID.
        if to consider #[+Keyword--YDID only] #[+Keyword__Contrast--YDID output] #[+Term--YDID СSS-files].
      |
      | Unlike the #[+Term--YDID HTML documents], in relation to #[+Term--YDID cascading style sheets], the
      |   "complete" adverb is #[+Keyword--YDID not]&nbsp;applicable, because the #[+Term--YDID styles] related with
      |   certain #[+Term--YDID HTML document] could be #[+Keyword--YDID arbitrary] distributed between
      |   #[+Term--YDID CSS files] and also exist outside of the #[+Term--YDID CSS files].

    p.Article-Paragraph.
      But, #[+Keyphrase--YDID in the case of usage of #[+Term--YDID CSS preprocessors]], the
        #[+DefinableTerm--YDID entry point] is the file including the #[+Keyword--YDID source] code, from which
        the conversion to output #[+Term--YDID CSS code] #[+Keyword--YDID beings].
      The #[+Term--YDID CSS preprocessors] #[+Keyword--YDID also] allows to organize the #[+Term--YDID styles] by
        #[+Term--YDID partial files] which is&nbsp;#[+Keyword--YDID not]&nbsp;being conversed to separate
        #[+Term--YDID CSS files] but could be #[+Keyword--YDID included] to the #[+Term--YDID entry points]
        (in the #[+ImportantEntity--YDID Stylus] preprocessor case it is possible by
        #[+ImportantEntity__Code--YDID @require] и #[+ImportantEntity__Code--YDID @import] #[+Term--YDID directives]).

    p.Article-Paragraph.
      There are #[+Keyword--YDID no] rules how many #[+Term--YDID CSS files] must be provided per
        #[+Term--YDID HTML page], thus the #[+Keyword--YDID styles] #[+Term--YDID entry point]
        #[+Keyword--YDID not]&nbsp;necessary must include all styles exclusively for corresponding
        #[+Term--YDID HTML document].
      But the spitting of the #[+Term--YDID styles] to #[+Term__Contrast--YDID CSS files] is the
        #[+Keyword--YDID important] #[+Term--YDID performance optimization] measure (also, the caching of
        #[+Term--YDID CSS files] should be respected).

      h3.Article-Heading3 ECMAScript logic

      p.Article-Paragraph.
        In ECMAScript logic case, the entry point is the JavaScript file from which the execution of application starting.

      ul.Article-UnorderedList

        li.
          For the front-end (client side), normally it must be one entry point per HTML document.
          The usage of multiple JavaScript files per HTML document without main one is skill existing methodology,
          but the project building tools has been created to replace it with organized entry point.

        li.
          he Single Page Applications (SPA) has one and only entry point, but for the web-sites it could be one entry point per HTML page.

        li.
          The project building systems like Webpack which YDA using can automatically extreact the common part from
            multiple entry points for the performance, but these extracted files are not entry points and called chunks.

        li For the server application single entry point is strongly recommended pattern.


      h2.Article-Heading2 Assets

      p.Article-Paragraph.
        The common term for images, fonts, audios and videos.
        All of these elements are being frequently used in modern websites and applications.


      h2.Article-Heading2 Selective execution

      p.Article-Paragraph.
        The selection of tasks, and also entry points groups and assets groups.
        As default, all tasks specified in the configuration file will be executed and also all entry points groups and assets
          groups will be processed, but selective execution functionality allows to it selectively.
